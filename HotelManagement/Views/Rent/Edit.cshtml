@{
    Layout = null;
}
@using Microsoft.AspNetCore.Http;
@using Newtonsoft.Json;

@model MergeRRO

<style>
    input[type="number"] {
        -webkit-appearance: textfield;
        -moz-appearance: textfield;
        appearance: textfield;
    }

    input[type=number]::-webkit-inner-spin-button,
    input[type=number]::-webkit-outer-spin-button {
        -webkit-appearance: none;
    }

    .quantity-input {
        width: 36px;
        padding: 5px 0;
        outline: none;
    }

    .out-none {
        outline: none;
    }
</style>

<style>
    .container-bottom-menu {
        display: none;
        position: fixed;
        z-index: 1000;
        top: 0;
        left: 0;
        bottom: 0;
        right: 0;
        justify-content: center;
        align-items: flex-end;
        background: rgba(0,0,0,.32);
    }

    .content-menu {
        padding: 8px 16px;
        width: 800px;
        min-height: 400px;
        box-sizing: border-box;
        display: block;
        outline: 0;
        max-height: 80vh;
        overflow: auto;
        box-shadow: 0 8px 10px -5px rgba(0,0,0,.2), 0 16px 24px 2px rgba(0,0,0,.14), 0 6px 30px 5px rgba(0,0,0,.12);
        background: #fff;
        color: rgba(0,0,0,.87);
    }

    .item {
        margin-top: 0.75rem;
        margin-right: 0.75rem;
        border-radius: 3px;
    }

    .item-name {
        line-height: 40px;
        text-align: center;
        width: auto;
        font-size: 15px;
        user-select: none;
    }

    .error {
        border-color: red !important;
    }
</style>
@{
    var detail = JsonConvert.SerializeObject(Model.Detail);
    var order = JsonConvert.SerializeObject(Model.Order);
    var menu = JsonConvert.SerializeObject(Model.Menu);
}
<div class="hearder border-end d-flex justify-content-between">
    <p>@Model.Room.Name</p>
    <button type="button" class="btn btn-success" id="saveEdit">Lưu</button>
</div>

<div class="body">
    <div class="d-flex">
        <div>
            <p>Ngày nhận phòng</p>
            <div class="d-flex me-3">
                <input type="text" class="form-control" id="checkInDate" readonly value="@(Model.Detail.CheckedInAt.ToString("MM-dd-yyyy"))">
                <span class="input-group" id="icon_checkInDate">
                    <span class="input-group-text bg-white">
                        <i class="fa fa-calendar"></i>
                    </span>
                </span>
            </div>
        </div>
        <div>
            <p>Giờ nhận phòng</p>
            <input type="text" class="form-control" id="checkInTime" value="@(Model.Detail.CheckedInAt.ToString("HH:mm"))">
        </div>
    </div>
    <div class="d-flex mt-3">
        <input type="number" id="inputDeposit" class="text-end out-none p-0 border-0 border-bottom" value="@(Model.Detail.Deposit/1000)" min="0" />
        <span class="border-bottom">.000 ₫</span>
    </div>
    <div class="d-flex justify-content-between align-items-center border-top border-bottoom mt-3">
        <div>Thêm menu</div>
        <button class="btn" id="showMenuBtn">
            <i class="fa-regular fa-square-plus"></i>
        </button>
    </div>
    <table class="table mt-3">
        <thead>
            <tr>
                <th scope="col">Tên menu</th>
                <th scope="col">Số lượng </th>
                <th scope="col">Thành tiền</th>
                <th scope="col">Thao tác</th>
            </tr>
        </thead>
        <tbody id="bodyDetailMenu">
            
        </tbody>
    </table>
    <div class="d-flex justify-content-between align-items-center border-top border-bottoom mt-3">
        <div class="fs-5">Tổng tiền</div>
        <div class="fs-5">
            <span id="totalPriceMenu">0</span>
            <span> ₫</span>
        </div>
    </div>
</div>
<div class="container-bottom-menu" id="bottomMenuView">
    <div class="content-menu" id="contentMenu">
        <nav>
            <div class="nav nav-tabs" id="nav-tab" role="tablist">
                <button class="nav-link active" id="nav-all-tab" data-bs-toggle="tab" data-bs-target="#nav-all" type="button" role="tab" aria-controls="nav-all" aria-selected="true">Tất cả</button>
                <button class="nav-link" id="nav-fastfoot-tab" data-bs-toggle="tab" data-bs-target="#nav-fastfoot" type="button" role="tab" aria-controls="nav-fastfoot" aria-selected="false">Đồ ăn</button>
                <button class="nav-link" id="nav-drink-tab" data-bs-toggle="tab" data-bs-target="#nav-drink" type="button" role="tab" aria-controls="nav-drink" aria-selected="false">Đồ uống</button>
                <button class="nav-link" id="nav-other-tab" data-bs-toggle="tab" data-bs-target="#nav-other" type="button" role="tab" aria-controls="nav-other" aria-selected="false">Loại khác</button>
            </div>
        </nav>
        <div class="tab-content" id="nav-tabContent">
            <div class="tab-pane fade show active" id="nav-all" role="tabpanel" aria-labelledby="nav-all-tab">
                <div class="d-flex flex-wrap p-2" id="bodyMenuItem">
                </div>
            </div>
            <div class="tab-pane fade" id="nav-fastfoot" role="tabpanel" aria-labelledby="nav-fastfoot-tab">
                <div class="d-flex flex-wrap p-2" id="bodyMenuItemFood">
                </div>
            </div>
            <div class="tab-pane fade" id="nav-drink" role="tabpanel" aria-labelledby="nav-drink-tab">
                <div class="d-flex flex-wrap p-2" id="bodyMenuItemDrink">
                </div>
            </div>
            <div class="tab-pane fade" id="nav-other" role="tabpanel" aria-labelledby="nav-other-tab">
                <div class="d-flex flex-wrap p-2" id="bodyMenuItemOther">
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    var detail = @Html.Raw(detail);
    var order = @Html.Raw(order);
    var newOrder = [];
    var menu = @Html.Raw(menu);
    detail.checkedInAt = new Date(detail.checkedInAt);
    detail.checkedInAt.setHours(detail.checkedInAt.getHours() - 7);

    menu.forEach(function (item, index) {
        addHtmlMenu(createHtmlMenu(item), item);
    })

    function addHtmlDetail(t) {
        $("#bodyDetailMenu").append(t);
    }

    function addHtmlMenu(t, item) {
        $("#bodyMenuItem").append(t);
        if (item.type)
            $("#bodyMenuItemFood").append(t);
        else if (item.type == false)
            $("#bodyMenuItemDrink").append(t);
        else
            $("#bodyMenuItemOther").append(t);
    }

    function createHtmlDetail(item, name) {
        return '<tr><th scope="row" class="align-middle" >' + name + '</th><td class="d-fex align-items-center"><button class="btn btn-minus" onclick="clickMinus(\'' + item.itemId + '\')"><i class="fa-regular fa-minus"></i></button><input type="number" class="inputQuantity quantity-input text-center border" id="' + item.itemId + 'ip" onfocus="focousInput(\'' + item.itemId + '\')" onfocusout="focousOutInput(\'' + item.itemId + '\')" value="' + item.quantity + '" min="1"><button class="btn btn-add" onclick="clickAdd(\'' + item.itemId + '\')"><i class="fa-regular fa-plus"></i></button></td><td class="align-middle" id="'+ item.itemId +'to">' + item.quantity * item.price + ' ₫ </td><td class="text-center align-middle"><button class="btn" id="' + item.itemId + 'int" onclick="removeDetailItem(\'' + item.itemId + '\')"><i class="fa-solid fa-x" ></i></button></td ></tr>';
    }

    function createHtmlMenu(item) {
        return '<div class="item border btn btn_chooseMenu ' + item.id + '" onclick="chooseClick(\'' + item.id + '\')"><div class="header-item d-flex flex-row"><div class="item-name text-warning px-3 text-center">' + item.name + '</div></div></div>';
    }

    function existItem(id) {
        for (let item of newOrder) {
            if (item.itemId == id)
                return true;
        }
        return false;
    }

    function getMenuItem(id) {
        for (let item of menu) {
            if (item.id == id)
                return item;
        }
        return null;
    }

    async function chooseClick(id) {
        var t = getMenuItem(id)
        reMoveHtmlMenu(t.type, t.id);
        var detailItem = {
            itemId: t.id,
            quantity: 0,
            price: t.exportPrice,
            orderedAt: new Date()
        }
        newOrder.push(detailItem);
        addHtmlDetail(createHtmlDetail(detailItem, t.name));
    }


    function reMoveHtmlMenu(type, id) {
        $("#bodyMenuItem").find("." + id).remove();
        if (type == 'true')
            $("#bodyMenuItemFood").find("." + id).remove();
        else if (type == 'false')
            $("#bodyMenuItemDrink").find("." + id).remove();
        else
            $("#bodyMenuItemOther").find("." + id).remove();
    }

    async function removeDetailItem(id) {
        var t = getDetailItem(id);
        var m = getMenuItem(id)

        $("#" + id + "int").parent().parent().remove();
        updatePirceItem(newOrder[t].quantity * newOrder[t].price * -1);
        newOrder.splice(t, 1);
        addHtmlMenu(createHtmlMenu(m), m);
    }

    function forMatTime(s) {
        let subS = s.split(":");
        let isAllDigitsHourse = /^\d+$/.test(subS[0]);
        let isAllDigitsMinute = /^\d+$/.test(subS[1]);
        if (isAllDigitsHourse && parseInt(subS[0]) < 24 && isAllDigitsMinute && parseInt(subS[1]) < 60)
            return true;
        return false;
    }

    var v = 0;

    async function focousInput(id) {
        v = $("#" + id + "ip").val();
    }

    async function focousOutInput(id) {
        if ($("#" + id + "ip").val() < 1) {
            $("#" + id + "ip").val(v);
        }
        else {
            var index = getDetailItem(id);
            newOrder[index].quantity = Number($("#" + id + "ip").val());
            updatePirceItem((newOrder[index].quantity * newOrder[index].price) - (Number(v) * newOrder[index].price));
            $("#" + id + 'to').html(newOrder[index].quantity * newOrder[index].price + " ₫");
        }
    }

    function getDetailItem(id) {

        for (var index = 0; index < newOrder.length; index++) {
            if (newOrder[index].itemId == id)
                return index;
        }
        return -1;
    }

    async function clickMinus(id) {
        var el = $("#" + id + "ip");
        if (el.val() > 1) {
            el.val(Number(el.val()) - 1);
            var index = getDetailItem(id);
            newOrder[index].quantity = Number(el.val());
            updatePirceItem(-newOrder[index].price);
            $("#" + id + 'to').html(newOrder[index].quantity * newOrder[index].price + " ₫");
        }
    }

    async function clickAdd(id) {
        var el = $("#" + id + "ip");
        el.val(Number(el.val()) + 1);
        var index = getDetailItem(id);
        newOrder[index].quantity = Number(el.val());
        updatePirceItem(newOrder[index].price);
        $("#" + id + 'to').html(newOrder[index].quantity * newOrder[index].price + " ₫");
    }

    function updatePirceItem(num) {
        $("#totalPriceMenu").html(Number($("#totalPriceMenu").html()) + num);
    }

    $(document).ready(function () {

        let checkInDate = $("#checkInDate");

        $("#icon_checkInDate").click(function () {
            checkInDate.datepicker("show");
        });

        checkInDate.datepicker({
            beforeShowDay: function (date) {
                var currentDate = new Date();
                currentDate.setDate(currentDate.getDate());
                return [date < currentDate];
            }
        });

        var errorDate = false

        checkInDate.change(function(){
            detail.checkedInAt = new Date($(this).val() + ' ' + $("#checkInTime").val() + ':00');
        })

        $("#checkInTime").change(function () {
            var kt = forMatTime($(this).val())

            if (kt) {

                var chooceDate = new Date(checkInDate.val() + ' ' + $(this).val() + ':00');
                var toDay = new Date();
                if (chooceDate.getTime() < toDay.getTime());
                {
                    detail.checkedInAt = chooceDate;
                    $(this).removeClass("is-invalid");
                    errorDate = false;
                    return;
                }
            }
            $(this).addClass("is-invalid");
            errorDate = true;
        });

        var errorDeposit = false;

        $("#inputDeposit").change(function () {
            if ($(this).val() != "" && Number($(this).val()) >= 0) {
                $(this).removeClass("error");
                errorDeposit = false;
            }
            else {
                $(this).addClass("error");
                errorDeposit = true;
            }
        })

        var viewBottomMenu = $("#bottomMenuView");

        $("#showMenuBtn").click(function () {
            viewBottomMenu.css('display', 'flex');
        })
        $("#bottomMenuView").click(function () {
            viewBottomMenu.hide();
        })

        $("#contentMenu").click(function (event) {
            event.stopPropagation();
        })

        $("#saveEdit").click(function() {
            if(!errorDate && !errorDeposit)
            {
                detail.checkedInAt.setHours(detail.checkedInAt.getHours() + 7);
                detail.deposit = $("#inputDeposit").val()*1000;
                order.details.push(...newOrder);
                $.ajax({
                    url: '/rent/EditPut',
                    type: 'PUT',
                    data: JSON.stringify({ room: null, detail: detail, order: order }),
                    contentType: 'application/json',
                    success: function (result) {
                        if(result)
                            window.location.replace('/rent?tap=rented');
                    },
                    error: function (xhr, status, error) {
                        console.log(xhr.responseText);
                    }

                })
            }
        })
    });
</script>